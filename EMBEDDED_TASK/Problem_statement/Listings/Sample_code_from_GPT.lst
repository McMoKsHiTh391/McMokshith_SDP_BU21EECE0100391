C51 COMPILER V9.60.7.0   SAMPLE_CODE_FROM_GPT                                              06/02/2024 16:06:34 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SAMPLE_CODE_FROM_GPT
OBJECT MODULE PLACED IN .\Objects\Sample_code_from_GPT.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Sample_code_from_GPT.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\Sample_code_from_GPT.lst) TABS(2) OBJECT(.\Objects\Sample_code_from_GPT.obj)

line level    source

   1          #include <reg51.h>
   2          #include <stdio.h>
   3          
   4          // LCD Control Pins
   5          sbit RS = P3^0;
   6          sbit RW = P3^1;
   7          sbit EN = P3^2;
   8          
   9          // ADC Control Pins
  10          sbit ALE = P3^3;
  11          sbit OE = P3^4;
  12          sbit START = P3^5;
  13          sbit EOC = P3^6;
  14          
  15          void delay(unsigned int time);
  16          void lcd_init(void);
  17          void lcd_command(unsigned char command);
  18          void lcd_data(unsigned char Data);
  19          void lcd_display_string(char *str);
  20          void lcd_display_voltage(float voltage);
  21          unsigned char adc_read(void);
  22          
  23          // Lookup table for voltage values stored in code memory
  24          float code adc_to_voltage[256] = {
  25              0.0000, 0.0196, 0.0392, 0.0588, 0.0784, 0.0980, 0.1176, 0.1373, 0.1569, 0.1765, 
  26              0.1961, 0.2157, 0.2353, 0.2549, 0.2745, 0.2941, 0.3137, 0.3333, 0.3529, 0.3725, 
  27              0.3922, 0.4118, 0.4314, 0.4510, 0.4706, 0.4902, 0.5098, 0.5294, 0.5490, 0.5686, 
  28              0.5882, 0.6078, 0.6275, 0.6471, 0.6667, 0.6863, 0.7059, 0.7255, 0.7451, 0.7647, 
  29              0.7843, 0.8039, 0.8235, 0.8431, 0.8627, 0.8824, 0.9020, 0.9216, 0.9412, 0.9608, 
  30              0.9804, 1.0000, 1.0196, 1.0392, 1.0588, 1.0784, 1.0980, 1.1176, 1.1373, 1.1569, 
  31              1.1765, 1.1961, 1.2157, 1.2353, 1.2549, 1.2745, 1.2941, 1.3137, 1.3333, 1.3529, 
  32              1.3725, 1.3922, 1.4118, 1.4314, 1.4510, 1.4706, 1.4902, 1.5098, 1.5294, 1.5490, 
  33              1.5686, 1.5882, 1.6078, 1.6275, 1.6471, 1.6667, 1.6863, 1.7059, 1.7255, 1.7451, 
  34              1.7647, 1.7843, 1.8039, 1.8235, 1.8431, 1.8627, 1.8824, 1.9020, 1.9216, 1.9412, 
  35              1.9608, 1.9804, 2.0000, 2.0196, 2.0392, 2.0588, 2.0784, 2.0980, 2.1176, 2.1373, 
  36              2.1569, 2.1765, 2.1961, 2.2157, 2.2353, 2.2549, 2.2745, 2.2941, 2.3137, 2.3333, 
  37              2.3529, 2.3725, 2.3922, 2.4118, 2.4314, 2.4510, 2.4706, 2.4902, 2.5098, 2.5294, 
  38              2.5490, 2.5686, 2.5882, 2.6078, 2.6275, 2.6471, 2.6667, 2.6863, 2.7059, 2.7255, 
  39              2.7451, 2.7647, 2.7843, 2.8039, 2.8235, 2.8431, 2.8627, 2.8824, 2.9020, 2.9216, 
  40              2.9412, 2.9608, 2.9804, 3.0000, 3.0196, 3.0392, 3.0588, 3.0784, 3.0980, 3.1176, 
  41              3.1373, 3.1569, 3.1765, 3.1961, 3.2157, 3.2353, 3.2549, 3.2745, 3.2941, 3.3137, 
  42              3.3333, 3.3529, 3.3725, 3.3922, 3.4118, 3.4314, 3.4510, 3.4706, 3.4902, 3.5098, 
  43              3.5294, 3.5490, 3.5686, 3.5882, 3.6078, 3.6275, 3.6471, 3.6667, 3.6863, 3.7059, 
  44              3.7255, 3.7451, 3.7647, 3.7843, 3.8039, 3.8235, 3.8431, 3.8627, 3.8824, 3.9020, 
  45              3.9216, 3.9412, 3.9608, 3.9804, 4.0000, 4.0196, 4.0392, 4.0588, 4.0784, 4.0980, 
  46              4.1176, 4.1373, 4.1569, 4.1765, 4.1961, 4.2157, 4.2353, 4.2549, 4.2745, 4.2941, 
  47              4.3137, 4.3333, 4.3529, 4.3725, 4.3922, 4.4118, 4.4314, 4.4510, 4.4706, 4.4902, 
  48              4.5098, 4.5294, 4.5490, 4.5686, 4.5882, 4.6078, 4.6275, 4.6471, 4.6667, 4.6863, 
  49              4.7059, 4.7255, 4.7451, 4.7647, 4.7843, 4.8039, 4.8235, 4.8431, 4.8627, 4.8824, 
  50              4.9020, 4.9216, 4.9412, 4.9608, 4.9804, 5.0000
  51          };
  52          
  53          void main(void) {
  54   1          unsigned char adc_value;
C51 COMPILER V9.60.7.0   SAMPLE_CODE_FROM_GPT                                              06/02/2024 16:06:34 PAGE 2   

  55   1          float voltage;
  56   1          
  57   1          lcd_init();  // Initialize the LCD
  58   1          lcd_display_string("Voltage: ");
  59   1          
  60   1          while(1) {
  61   2              adc_value = adc_read();  // Read ADC value
  62   2              voltage = adc_to_voltage[adc_value];  // Get voltage from lookup table
  63   2      
  64   2              lcd_command(0xC0);  // Move cursor to the second line of LCD
  65   2              lcd_display_voltage(voltage);  // Display the voltage on LCD
  66   2      
  67   2              if (voltage > 3.0) {
  68   3                  P0 = 0XFC;
  69   3                  lcd_command(0xC8);  // Move cursor to display status
  70   3                  lcd_display_string("2 LEDs ON");
  71   3              } else if (voltage >= 2.0) {
  72   3                  P0 = 0XFE;
  73   3                  lcd_command(0xC8);  // Move cursor to display status
  74   3                  lcd_display_string("1 LED ON ");
  75   3              } else {
  76   3                  P0 = 0XFF;
  77   3                  lcd_command(0xC8);  // Move cursor to display status
  78   3                  lcd_display_string("LEDs OFF ");
  79   3              }
  80   2      
  81   2              delay(10);  // Delay for some time (1000 ms)
  82   2          }
  83   1      }
  84          
  85          // Function to initialize the LCD
  86          void lcd_init(void) {
  87   1          lcd_command(0x38);  // Initialize LCD in 8-bit mode
  88   1          delay(1);
  89   1          lcd_command(0x0C);  // Display ON, Cursor OFF
  90   1          delay(1);
  91   1          lcd_command(0x06);  // Auto increment cursor
  92   1          delay(1);
  93   1          lcd_command(0x01);  // Clear display
  94   1          delay(1);
  95   1          lcd_command(0x80);  // Move cursor to the first line
  96   1          delay(1);
  97   1      }
  98          
  99          // Function to send command to LCD
 100          void lcd_command(unsigned char command) {
 101   1          P2 = command;
 102   1          RS = 0;  // Select command register
 103   1          RW = 0;  // Write operation
 104   1          EN = 1;
 105   1          delay(1);
 106   1          EN = 0;
 107   1          delay(1);
 108   1      }
 109          
 110          // Function to send data to LCD
 111          void lcd_data(unsigned char Data) {
 112   1          P2 = Data;
 113   1          RS = 1;  // Select data register
 114   1          RW = 0;  // Write operation
 115   1          EN = 1;
 116   1          delay(1);
C51 COMPILER V9.60.7.0   SAMPLE_CODE_FROM_GPT                                              06/02/2024 16:06:34 PAGE 3   

 117   1          EN = 0;
 118   1          delay(1);
 119   1      }
 120          
 121          // Function to display string on LCD
 122          void lcd_display_string(char *str) {
 123   1          while (*str) {
 124   2              lcd_data(*str++);
 125   2          }
 126   1      }
 127          
 128          // Function to display voltage on LCD
 129          void lcd_display_voltage(float voltage) {
 130   1          char buffer[16];
 131   1          sprintf(buffer, "%1.4fV", voltage);  // Format voltage with 4 decimal places
 132   1          lcd_display_string(buffer);
 133   1      }
 134          
 135          // Function to read data from ADC
 136          unsigned char adc_read(void) {
 137   1          unsigned char adc_value;
 138   1      
 139   1          ALE = 1;
 140   1          START = 1;
 141   1          delay(1);
 142   1          ALE = 0;
 143   1          START = 0;
 144   1      
 145   1          while (EOC == 1);  // Wait for end of conversion
 146   1      
 147   1          OE = 1;
 148   1          adc_value = P1;  // Read ADC value from Port 1
 149   1          OE = 0;
 150   1      
 151   1          return adc_value;
 152   1      }
 153          
 154          // Function to generate delay
 155          void delay(unsigned int time) {
 156   1          unsigned int i, j;
 157   1          for(i = 0; i < time; i++) {
 158   2              for(j = 0; j < 1275; j++);
 159   2          }
 160   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    366    ----
   CONSTANT SIZE    =   1071    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
